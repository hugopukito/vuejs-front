{"version":3,"file":"js/app.0879d604.js","mappings":"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","sources":["webpack://p-front/./src/components/Spinner.vue","webpack://p-front/./src/components/NavBar.vue","webpack://p-front/./src/components/NavBar.vue?01fd","webpack://p-front/./src/App.vue","webpack://p-front/./src/App.vue?7ccd","webpack://p-front/./src/views/Home.vue","webpack://p-front/./src/views/Home.vue?9051","webpack://p-front/./src/views/Topics.vue","webpack://p-front/./src/views/Topics.vue?b9a8","webpack://p-front/./src/views/NotFound.vue","webpack://p-front/./src/views/NotFound.vue?0aab","webpack://p-front/./src/views/Keyboard.vue","webpack://p-front/./src/views/Keyboard.vue?e0b2","webpack://p-front/./src/router/index.js","webpack://p-front/./src/main.js","webpack://p-front/webpack/bootstrap","webpack://p-front/webpack/runtime/chunk loaded","webpack://p-front/webpack/runtime/compat get default export","webpack://p-front/webpack/runtime/define property getters","webpack://p-front/webpack/runtime/global","webpack://p-front/webpack/runtime/hasOwnProperty shorthand","webpack://p-front/webpack/runtime/publicPath","webpack://p-front/webpack/runtime/jsonp chunk loading","webpack://p-front/webpack/startup"],"sourcesContent":["import script from \"./Spinner.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Spinner.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Spinner.vue?vue&type=style&index=0&id=69397489&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-69397489\"]])\n\nexport default __exports__","<template>\n  <div class=\"box\">\n    <div @click=\"trigger_navbar()\" style=\"margin-left: 1rem\"> \n      <font-awesome-icon icon=\"fa-solid fa-bars\" size=\"xl\" /> \n    </div>\n    <img class=\"luffy\" src=\"@/assets/luffy.png\">\n  </div>\n  <div class=\"nav-bar\" @click=\"trigger_navbar()\" :class=\"{ hide: hide }\">\n    <div class=\"router-links\">\n      <router-link to=\"/\" > Home </router-link>\n      <router-link to=\"/topics\"> Topics </router-link>\n      <router-link to=\"/keyboard\"> Keyboard </router-link>\n      <!-- <router-link to=\"/monitoring\"> Monitoring </router-link>\n      <router-link to=\"/chat\"> Chat </router-link>\n      <router-link to=\"/game\">\n        <span class=\"game-link\"> Game üïπÔ∏è </span>\n      </router-link> -->\n    </div>\n    <!-- <div class=\"auth\" v-if=\"userName === null\">\n      <div class=\"router-link\" @click=\"openSignup()\"> Sign up </div>\n      <div class=\"router-link\" @click=\"openSignin()\"> Sign in </div>\n    </div>\n    <div class=\"auth\" v-else>\n      <div class=\"router-link\"> {{ userName }} </div>\n      <div class=\"router-link\" @click=\"logout()\"> Sign out </div>\n    </div> -->\n  </div>\n  <div>\n    <!-- <Signup @modal-boolean=\"closeSignup()\" @signup-worked=\"closeSignup(); openSignin()\" :isModalOpen=\"isSignupOpen\"/>\n    <Signin @modal-boolean=\"closeSignin()\" @signin-worked=\"closeSignin(); signin()\" :isModalOpen=\"isSigninOpen\"/> -->\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref } from \"vue\";\nimport Signup from \"./Signup.vue\";\nimport Signin from \"./Signin.vue\";\n\nconst isSignupOpen = ref(false);\nconst isSigninOpen = ref(false);\nlet userName = ref(null);\nlet hide = ref(true)\n\nonMounted(() => {\n  userName.value = localStorage.getItem(\"userName\");\n})\n\nfunction trigger_navbar() {\n  hide.value = !hide.value\n  if (window.innerWidth < 500 && (window.getComputedStyle(document.body).overflow !== \"hidden\" || window.getComputedStyle(document.documentElement).overflow !== \"hidden\")) {\n    document.body.style.overflow = \"hidden\";\n    document.documentElement.style.overflow = \"hidden\";\n  } else {\n    document.body.style.overflow = \"visible\";\n    document.documentElement.style.overflow = \"visible\";\n  }\n}\n\nfunction signin(){\n  userName.value = localStorage.getItem(\"userName\");\n}\n\nfunction logout() {\n  localStorage.removeItem(\"userName\");\n  localStorage.removeItem(\"token\");\n  userName.value = null;\n}\n\nfunction openSignup() {\n  isSignupOpen.value = true;\n}\n\nfunction closeSignup() {\n  isSignupOpen.value = false;\n}\n\nfunction openSignin() {\n  isSigninOpen.value = true;\n}\n\nfunction closeSignin() {\n  isSigninOpen.value = false;\n}\n</script>\n\n<style scoped lang=\"less\">\n.nav-bar {\n  height: 60px;\n  \n  display: flex;\n  // justify-content: space-between;\n  justify-content: center;\n\n  background-color: #333;\n}\n\n.router-links, .auth {\n  display: flex;\n  > * {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    white-space: nowrap;\n\n    flex: 1;\n\n    font-size: 1.25em;\n    color: beige;\n    padding: 14px;\n    cursor: pointer;\n\n    &:hover {\n      background-color: #111;\n    }\n  }\n}\n\n.router-link-active {\n  color: aquamarine;\n}\n\n.box {\n  display: none;\n}\n</style>\n\n<style scoped lang=\"less\">\n@media screen and (max-device-width: 500px) {\n  .nav-bar {\n    height: calc(100vh - 60px);\n    height: calc(100dvh - 60px);\n    width: 100vw;\n\n    flex-direction: column;\n    justify-content: space-between;\n\n    opacity: 1;\n    transition: opacity 350ms, transform 350ms;\n    transform: translateX(0);\n\n    position: absolute;\n    top: 60px;\n    left: 0;\n    z-index: 1;\n  }\n  .nav-bar.hide {\n    opacity: 0;\n    transform: translateX(-100%);\n    pointer-events: none;\n  }\n  .router-links, .auth {\n    flex-direction: column;\n  }\n  .box {\n    display: flex;\n    align-items: center;\n\n    width: 100vw;\n    height: 60px;\n    background-color: #333;\n  }\n  .box img {\n    width: auto;\n    height: 60px;\n  } \n  .luffy {\n    position: absolute;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n  }\n}\n</style>","import script from \"./NavBar.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NavBar.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NavBar.vue?vue&type=style&index=0&id=d43f5032&scoped=true&lang=less\"\nimport \"./NavBar.vue?vue&type=style&index=1&id=d43f5032&scoped=true&lang=less\"\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-d43f5032\"]])\n\nexport default __exports__","<template>\n  <NavBar/>\n  <router-view/>\n</template>\n\n<script setup>\nimport NavBar from \"@/components/NavBar.vue\"\nimport { onMounted } from \"vue\";\n\nvar Buffer = require('buffer/').Buffer\n\nonMounted(() => {\n  if (localStorage.token != null) {\n    const jwtPayload = parseJwt(localStorage.token);\n    if (jwtPayload.exp < Date.now()/1000) {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"userName\");\n    }\n  }\n})\n\nfunction parseJwt (token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(Buffer.from(base64, \"base64\").toString(\"ascii\").split(\"\").map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n};\n</script>\n\n<style>\n@font-face {\n  font-family: \"FjallaOne\";\n  src: url(\"assets/fonts/FjallaOne-Regular.ttf\") format(\"truetype\"),\n}\n\n#app {\n  font-family: 'FjallaOne', Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: beige;\n}\n.h1 {\n  font-size: 2.2em;\n  margin-top: 1.5em;\n  margin-bottom: 1.7em;\n  color:orange;\n}\n.h2 {\n  font-size: 1.9em;\n  margin-bottom: 1.5em;\n  color:aquamarine;\n}\n.h3 {\n  font-size: 1.5em;\n  margin-bottom: 1.5em;\n  color:coral;\n}\na {\n  text-decoration: none;\n  color:coral;\n}\n</style>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=c3be12e6&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        Hello :)\n    </div>\n</template>\n\n<style scoped lang=\"less\">\n.main {\n    height: calc(100vh - 60px);\n    height: calc(100dvh - 60px);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    font-family: \"FjallaOne\";\n}\n</style>\n","import { render } from \"./Home.vue?vue&type=template&id=f88cd2ea&scoped=true\"\nconst script = {}\n\nimport \"./Home.vue?vue&type=style&index=0&id=f88cd2ea&scoped=true&lang=less\"\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f88cd2ea\"]])\n\nexport default __exports__","<template>\n  <div class=\"grid\">\n    <nav id=\"vertical_nav\">\n        <ul>\n          <li class=\"close_button\" @click=\"trigger_navbar\">X</li>\n          <li class=\"hardware&os\" @click=\"trigger_navbar\"><a href=\"#hardware&os\">Hardware & OS ‚öôÔ∏è</a></li>\n          <li class=\"ssh\" @click=\"trigger_navbar\"><a href=\"#ssh\">SSH üîå</a></li>\n          <li class=\"ssh_keys\" @click=\"trigger_navbar\"><a href=\"#ssh_keys\">SSH Keys üîë</a></li>\n          <li class=\"port_forwarding\" @click=\"trigger_navbar\"><a href=\"#port_forwarding\">Port forwarding üåê</a></li>\n          <li class=\"dns\" @click=\"trigger_navbar\"><a href=\"#dns\">DNS üåé</a></li>\n          <li class=\"nginx\" @click=\"trigger_navbar\"><a href=\"#nginx\">NGINX üõ£Ô∏è</a></li>\n          <li class=\"https\" @click=\"trigger_navbar\"><a href=\"#https\">HTTPS üîí</a></li>\n        </ul>\n    </nav>\n    <div id=\"main\" class=\"main\">\n      <div class=\"h1\"> Deploy your website </div>\n      <div id =\"box\" class=\"box\">\n        <div @click=\"trigger_navbar\" style=\"margin: 5px\"> Find your topic &nbsp;\n          <font-awesome-icon icon=\"fa-solid fa-magnifying-glass\" /> \n        </div>\n      </div>\n      <section id=\"hardware&os\">\n        <div class=\"h2\">Hardware & OS ‚öôÔ∏è</div>\n          <div class=\"text\">\n            This website is running on a pi4 with 4GB of ram, I only plugged it and install raspbian os (default). <br> <br>\n\n            To install rapsbian on your SD card, download <a href=\"https://www.raspberrypi.com/software/\" target=\"_blank\"> \n            pi imager </a>, select the os you want (raspbian working well) and your SD card.\n          </div>\n\n          <img src=\"@/assets/topics/pi_imager.png\">\n\n          <div class=\"text\">\n            Set the hostname you want to recognize your pi4. <br> <br>\n            Next you will have to activate ssh and set a password.\n          </div>\n\n          <img src=\"@/assets/topics/pi_imager_settings.png\">\n\n          <div class=\"text\">\n            Now you can plug the SD card in your pi4 and power it by pluggin the power cable.<br> <br>\n            Plugged the hdmi cable to a screen, your keyboard and your mouse and you're good to go.\n          </div>\n            \n          <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n            üöß If you've got message error \"unable to read partition as fat\",\n            just destroy your SD card and buy another one. You can try to repair it by searching for solution, \n            in my case I couldn't do anything so I changed it. üöß\n          </div>\n\n          <div class=\"text\">\n            Os should be installed on your pi4, go on the top of your screen and select your wifi. Open a terminal and run\n            the simple command <div class=\"code\">ip a</div> To get the local ip address of your pi4 to access it later.\n          </div>\n\n          <img src=\"@/assets/topics/ip_address.png\">\n\n          <div class=\"text\">\n            Copy / paste this ip address somewhere on your dev computer üìù <br> <br>\n            Now you can unplug everything, your pi4 is ready for dev !\n          </div>\n      </section>\n      <section id=\"ssh\">\n        <div class=\"h2\">SSH üîå</div>\n        <div class=\"text\">\n          Now you've configured your pi4 on your local network, you can connect threw it with the SSH (Secure Shell), in the\n          previous step we enable SSH so you don't need to install it manually. <br> <br>\n          Notice that you can unplug all device on your pi4 (don't need a screen, mouse and keyboard anymore), you will be able \n          to dev on it by accessing to the same terminal of your real pi4 machine with SSH protocol. Use the command bellow :\n          <div class=\"code\"> ssh 'pi4HostName'@'pi4Ip'</div>\n          In my case :\n          <div class=\"code\"> ssh pukito@192.168.0.27</div>\n          Once you've hit enter, the terminal should ask you for the password you set before. <br> <br>\n          You can now dev on your pi4 from another device connected to your local network ! ‚ú®\n        </div>\n      </section>\n      <section id=\"ssh_keys\">\n        <div class=\"h2\">SSH Keys üîë</div>\n        <div class=\"text\">\n          Now you can access your pi4 and program stuff on it, you may want to remove the password but still get a layer of security so\n          not anyone can access it (although the pi4 is only visible on your local network for the moment) üôÉ <br> <br>\n          The solution is SSH keys, you will generate a pair of key with your pi4, one public that will be store on your pi4, the other\n          one that you will keep secret and store on the device which will access the pi4. <br> <br>\n          To generate those keys, you will need to use the command : <div class=\"code\"> ssh-keygen</div>\n          Then they will ask you a file to save the public and private key, just press Enter. You will need to enter a passphrase, it's up to you,\n          if you feel like your private key won't be stolen, just press Enter. If you set a passphrase, each time you will try to connect\n          with ssh on your pi4, it will ask you the passphrase. <br> <br>\n          Setting a passphrase will add another layer of security, brut forcing rsa keys need a lot of ressource so an attacker won't\n          try to brut force your private key, but if he steals your private key, the passphrase will slow down the attacker. <br> <br>\n          Now you've generated the two keys in <div class=\"code\">/home/'pi4HostName'/.ssh/</div>, public key: id_rsa.pub, private key: id_rsa, \n          take the private key with a secure way (best way is to store it in an usb key). <br> <br>\n          Next step is to go on the machine you wanna use to connect on your pi4, take your private key (id_rsa) and place it in\n          <div class=\"code\">/home/'yourMachineName'/.ssh/</div>\n          Try to connect on your pi4 with : <div class=\"code\">ssh 'pi4HostName'@'pi4Ip'</div> It will ask you your passphrase (if you set one),\n          there is one more thing to change on your pi4, if someone don't have any private key on their machine they use to connect on your pi4,\n          they will use automatically your basic authentication. <br> <br>\n          So you need to disable it to anyone that doesn't have the key can't use the basic\n          authentication. <br> <br>\n          Go on your pi4, use <div class=\"code\"> sudo nano /etc/ssh/sshd_config</div> And set <div class=\"code\"> PasswordAuthentication no</div>\n          Now you can restart ssh service and your done !\n          <div class=\"code\"> sudo service ssh restart</div>\n        </div>\n      </section>\n      <section id=\"port_forwarding\">\n        <div class=\"h2\">Port forwarding üåê</div>\n        <div class=\"text\">\n          If you want to connect on your pi4 without being connected to your local network, you can enable port forwarding \n          on your internet provider's\n          interface. You can access it by typing '192.168.0.1' or '192.168.1.1' (depends on your internet box). <br> <br>\n          Your login should be 'admin' and the password usually is your wifi's password. <br> <br>\n          Once you've logged in, you should see the IP address of your internet box, this one is unique and you're gonna need it for later. \n          Go on the section \"port forwarding\". <br> <br>\n          Now you need to enter the port you want to forward, in our case, the port '22' for ssh. Then select \"both protocol\" and put pi4 \n          local ip address. <br> <br>\n          Try to open a terminal on your local machine, instead of <div class=\"code\">ssh 'pi4HostName'@'pi4Ip'</div> Try using\n          <div class=\"code\"> ssh 'pi4HostName'@'yourBoxIp'</div>\n          You should be able to access your pi4 with another internet connection and access it from anywhere ‚ú® <br> <br>\n          You can forward other ports, so everything which is running on a certain port locally on your pi4 can be access from anywhere ! <br> <br>\n          If you're running an api on port 8080, forward this port, put pi4 local ip address, then type 'yourBoxIp':8080 and\n          you will be able to access your api running on your pi4 without being connected on your local network üôÉ <br> <br>\n          If you type 'yourBoxIp' without specifying any port behind, it gonna use the port 80. <br> <br>\n          Forward the port 80 of your box on the port 80 of your pi4, run a little program on you pi4 like \"node.js\" on port 80 \n          and provide an index.html file. <br> <br>\n          Type 'yourBoxIp', you should see your index.html üòã\n        </div>\n      </section>\n      <section id=\"dns\">\n        <div class=\"h2\">DNS üåé</div>\n        <div class=\"text\">\n          Typing your box internet ip address can be anoying, especially if you want to present your fresh index.html to someone üßä <br> <br>\n          Buying a domain name and put it on your ip address is really simple and cheap (7üí≤ a year) <br> <br>\n          That's how I did to make 'hugopukito.com' use my box internet \n          ip address so you can access this website (running on port 80 with port forwarding). <br> <br>\n          I used <a href=\"https://www.namecheap.com/\" target=\"_blank\"> name cheap </a> to buy my domain name, once you found a name available, \n          buy it, select it and go to \"Advanced DNS\".\n        </div>\n\n        <img src=\"@/assets/topics/name_cheap.png\">\n\n        <div class=\"text\">\n          Replace the hidden value by your box internet ip address and \"hugopukito.com\" by your domain name <br> <br>\n          Now you can try on your local machine <div class=\"code\"> ssh 'pi4HostName'@'yourDomainName'</div>\n          If you type your domain name on google's search bar, you should see your fresh index.html üßä <br> <br>\n          You don't need anymore your box internet ip address and can give your domain name to your friends üòã\n        </div>\n      </section>\n      <section id=\"nginx\">\n        <div class=\"h2\">NGINX üõ£Ô∏è</div>\n        <div class=\"text\">\n          By accessing your ip with your DNS, you get on the port 80 by default, if you want to access a service\n          running on another port, for example port 8080, you need to type 'yourDns':8080, you also need to\n          add port 8080 on port forwarding on your internet box configuration, it can be pretty anoying if you\n          want to add different services on your pi4. <br> <br>\n          Thanks to a reverse proxy, you can do some routing on your DNS ! <br> <br>\n          Imagine you're running your golang api on localhost:8080, you want to access it with your DNS by typing\n          'yourDns'/api (for example). <br> <br>\n          By running NGINX on your pi4, you will be able to configure all \n          routes to go on your local services. <br> <br>\n          NGINX will run on your port 80 by default, you will first configure the default route to give your\n          index.html üßä. So when a user will type your DNS, it will go on your port 80, then go on your NGINX\n          and will route to your index.html.\n          <div class=\"code\">sudo apt install nginx</div>\n          Now you need to go in nginx directory and create your own conf file for your website.\n          <div class=\"code\">cd /etc/nginx/sites-enabled/</div>\n          <div class=\"code\">cd /etc/nginx/sites-available/</div>\n          Remove everything in those folders, create a file named with your DNS (for me it's hugopukito.com).\n          <div class=\"code\">cd /etc/nginx/sites-enabled/ && touch 'yourDns'</div>\n          And create a link between sites-enabled and sites-available so you don't need to duplicate this file.\n          <div class=\"code\">ln -s /etc/nginx/sites-enabled/'yourDns' /etc/nginx/sites-available/</div>\n          Now everything you add in this file (mine is hugopukito.com) will be used by nginx as a conf file, \n          you can now put your index.html like so :\n          <div class=\"code\" style=\"text-align:left;\">\n            server { <br>\n              &ensp; listen 80; <br>\n              &ensp; location / { <br>\n              &ensp; &ensp; root /home/'yourWorkDir'/website; <br> \n              &ensp;&ensp;} <br>\n            } <br>\n          </div>\n          Go in your working directory and create a folder 'website' with the index.html in it,\n          then you need to reload nginx and you type your dns.\n          <div class=\"code\">sudo systemctl reload nginx</div>\n          You should see your index.html üßä like before ! üòã <br> <br>\n          Let's return to our basic example, we want to add a route to our service running on port 8080. <br> <br>\n          This service running on port 8080 is our api, so we will add a route in the nginx conf for it.\n          <div class=\"code\" style=\"text-align:left;\">\n            server { <br>\n              &ensp; listen 80; <br> <br>\n              &ensp; root /home/'yourWorkDir'/website; <br> <br>\n              &ensp; location /api { <br>\n              &ensp; &ensp; rewrite  ^/api/(.*)  /$1 break; <br>\n              &ensp; &ensp; proxy_pass http://127.0.0.1:8080; <br> \n              &ensp;&ensp;} <br>\n            } <br>\n          </div>\n          We add the route /api in our conf, '127.0.0.1' refer to 'localhost'. The proxy pass will pass\n          all request on our DNS with /api on our service running on local on port 8080. <br> <br>\n          To get proper route rewriting calling the intern routes of your api, you can use the rewrite option. <br> <br>\n          Notice that you don't really need to specify the '/' location for the root route. <br> <br>\n          Personnally, I need to type 'hugopukito.com/api' to access my api running locally on port 8080 <br> <br>\n          Try typing 'yourDns'/api, you should see the response from your api printing ! üêØ <br> <br>\n          You can create as many services as you want and route then with NGINX ‚ú® <br> <br>\n        </div>\n      </section>\n      <section id=\"https\">\n        <div class=\"h2\">HTTPS üîí</div>\n        <div class=\"text\">\n          Once your website is running with different services, you may want to use https instead of http. <br> <br>\n          This can be done for free by using a program called Let's encrypt. <br> <br>\n          Let's install the certbot tool made by them and get into it.\n          <div class=\"code\">sudo apt install certbot</div> \n          This tool will generate a 3 month certificate that ensure data transiting on your website is encrypted. <br> <br>\n          Make sure to stop nginx before launching the command, this bot will test your 80 port, so it need to be free <br> <br>\n          <div class=\"code\">sudo systemctl stop nginx</div>\n          <div class=\"code\">sudo certbot certonly --standalone --preferred-challenges http-01 -d 'yourDns'</div>\n          Now you've got ssl certificate and the key with it, you will need to specify the location of those files\n          in your nginx conf.\n          <div class=\"code\" style=\"text-align:left;\">\n            server { <br>\n              &ensp; listen 80; <br>\n              &ensp; server_name 'yourDns' <br>\n              &ensp; return 301 https://$server_name$request_uri; <br>\n            } <br> <br>\n            server { <br>\n              &ensp; listen 443 ssl http2; <br>\n              &ensp; server_name 'yourDns' <br> <br>\n              &ensp; ssl_certificate /etc/letsencrypt/live/'your Dns'/fullchain.pem; <br>\n              &ensp; ssl_certificate_key /etc/letsencrypt/live/'your Dns'/privkey.pem; <br> <br>\n              &ensp; root /home/'yourWorkDir'/website; <br>\n            } <br>\n          </div>\n          Now all request comming on port 80 (http) will be redirect on port 443 (https), you should see\n          the green padlock before the url of your website on your browser once your restarted nginx. <br> <br>\n          You will need to regenerate your certificate because it expire every 3 months, \n          you can do it 1 month before it expire with this command, don't forget to stop nginx before <br> <br>\n          <div class=\"code\">sudo systemctl stop nginx</div>\n          <div class=\"code\">sudo certbot renew</div>\n          There is one last thing to take into considaration, all your services are still running with http except\n          your website. The api we routed before don't have any certificate link to it. <br> <br>\n          There is a trick to pass the request made to the api in https from users to http in local.\n          <div class=\"code\" style=\"text-align:left;\">\n            server { <br>\n              &ensp; listen 80; <br>\n              &ensp; server_name 'yourDns' <br>\n              &ensp; return 301 https://$server_name$request_uri; <br>\n            } <br> <br>\n            server { <br>\n              &ensp; listen 443 ssl http2; <br>\n              &ensp; server_name 'yourDns' <br> <br>\n              &ensp; ssl_certificate /etc/letsencrypt/live/'your Dns'/fullchain.pem; <br>\n              &ensp; ssl_certificate_key /etc/letsencrypt/live/'your Dns'/privkey.pem; <br> <br>\n              &ensp; root /home/'yourWorkDir'/website; <br> <br>\n              &ensp; location /api { <br>\n              &ensp; &ensp; rewrite  ^/api/(.*)  /$1 break; <br>\n              &ensp; &ensp; proxy_pass http://127.0.0.1:8080; <br> \n              &ensp; &ensp; proxy_set_header Host $host; <br>\n              &ensp; &ensp; proxy_set_header X-Real-IP $remote_addr; <br>\n              &ensp; &ensp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; <br>\n              &ensp; &ensp; proxy_set_header X-Forwarded-Proto https; <br>\n              &ensp;&ensp;} <br>\n            } <br>\n          </div>\n          Now you can fully use https üîí with all your services ! ‚ú®\n        </div>\n      </section>\n    </div>\n    <footer></footer>\n  </div>\n</template>\n\n<style scoped>\n\n.grid {\n  display: grid;\n  grid-template-columns: min-content;\n  color:beige;\n}\n\n.box {\n  display: none;\n}\n\nsection {\n  min-height: 100px;\n  width: 60vw;\n  margin: 0 auto;\n  padding: 0.625em;\n  margin-bottom: 1.5em;\n}\n\nimg {\n  width: 500px;\n  height: auto;\n  box-shadow: 0px 0px 30px 3px rgba(212, 215, 135, 0.15);\n}\n\n.code {\n  background-color: #1e1e3f;\n  color: #9efeff;\n  padding: 10px;\n  border-radius: 10px;\n  font-family: monospace;\n  font-size: 0.8em;\n  margin: 20px 0;\n  text-align: start;\n}\n\n.text {\n  font-size: 1.2em;\n  margin-top: 3em;\n  margin-bottom: 3em;\n  width: 50vw;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: start;\n}\n\n.close_button {\n  display: none;\n}\n\nfooter {\n  grid-column: 1 / 3;\n}\n\nnav {\n  white-space: nowrap;\n  background: #37474F;\n  width: 195px;\n}\n\nnav ul {\n  position: sticky;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  top: 0;\n}\n\nnav ul li a {\n  display: block;\n  padding: 0.5rem 1rem;\n  color: white;\n  text-decoration: none;\n  font-size: 1.1rem;\n}\nnav ul li:hover, nav ul li.active {\n  background-color: #111;\n}\n</style>\n\n<style scoped>\n@media screen and (max-device-width: 780px) {\n  .grid {\n    display: block;\n    margin-top: 3rem;\n  }\n  .h1 {\n    font-size: 2em;\n    margin-top: 1.5em;\n  }\n  section, img, .text {\n    width: 90vw;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .box {\n    display: block;\n    margin: auto;\n    width: 60vw;\n    border-style: solid;\n    margin-top: 3em;\n    margin-bottom: 1.5em;\n    font-size: 1.5em;\n  }\n  nav {\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    margin: 0;\n    padding-top: 1.5em;\n    top: -200vh;\n    background: rgba(15, 19, 21, 0.8);\n    backdrop-filter: blur(1rem);\n  }\n  nav ul li a {\n    color:aquamarine;\n    font-size: 1.5rem;\n    margin: 1rem;\n  }\n  .close_button {\n    display: initial;\n  }\n  nav.active {\n    top: 7vh;\n  }\n  .main.hideOverflow {\n    height: 80vh;\n    overflow: hidden;\n  }\n}\n\n</style>\n\n<script setup>\n\nimport { onMounted } from \"vue\"\n\nfunction trigger_navbar() {\n  if (document.getElementById(\"vertical_nav\").classList.contains(\"active\")) {\n    document.getElementById(\"vertical_nav\").classList.remove(\"active\");\n    document.getElementById(\"main\").classList.remove(\"hideOverflow\");\n  } else {\n    document.getElementById(\"vertical_nav\").classList.add(\"active\");\n    document.getElementById(\"main\").classList.add(\"hideOverflow\");\n  }\n}\n\nonMounted(() => {\n  const sections = document.querySelectorAll(\"section\");\n  const navLi = document.querySelectorAll(\"nav ul li\");\n  window.onscroll = () => {\n    var current = \"\";\n\n    sections.forEach((section) => {\n      const sectionTop = section.offsetTop;\n      if (scrollY >= sectionTop - 60) {\n        current = section.getAttribute(\"id\"); \n      }\n    });\n\n    navLi.forEach((li) => {\n      li.classList.remove(\"active\");\n      if (li.classList.contains(current)) {\n        li.classList.add(\"active\");\n      }\n    });\n  };\n})\n\n\n</script>","import script from \"./Topics.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Topics.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Topics.vue?vue&type=style&index=0&id=3fb77d2f&scoped=true&lang=css\"\nimport \"./Topics.vue?vue&type=style&index=1&id=3fb77d2f&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3fb77d2f\"]])\n\nexport default __exports__","<template>\n    <h1> 404 tu t'es perdu</h1>\n</template>","import { render } from \"./NotFound.vue?vue&type=template&id=2333ce6e\"\nconst script = {}\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"h1\">\n    Custom Keyboard ‚å®Ô∏è\n  </div>\n  <div class=\"resume\">\n    Learn how to build a 65% ISO-FR keyboard from scratch\n  </div>\n  <img src=\"@/assets/keyboard/keyboard.png\">\n  <div class=\"h3\">\n    I'll describe in each section the different elements you'll need to\n    build this custom keyboard\n  </div>\n  <div class=\"text\">\n    Be aware of the compatibility between components you'll choose, there are plenty of possibilities\n    for each element in a keyboard. <br> <br>\n    I'll give the reference of each element I used to make my keyboard.\n    Mine is a 65% ISO-FR keyboard, didn't found any seller of this size combined with this layout üò≠\n  </div>\n  <div class=\"h2\">\n    PCB\n  </div>\n  <div class=\"text\">\n    To make the link between where you're typing on the keyboard and your computer, \n    you'll need a Printed Circuit Board. There are different size and layout of PCB, I'll explain everything.\n  </div>\n  <div class=\"text\">\n    The size means the numbers of keys you want on your keyboard, 100% is a full keyboard, \n    mine is a 65%, no number pad and function row. More info \n    <a href=\"https://switchandclick.com/keyboard-sizes/\" target=\"_blank\"> here</a>. <br> <br>\n    The layout depends on your country, if you're used to manipulate a qwerty keyboard, your layout is ANSI.\n    Otherwise, you probably need an ISO layout, in my case I choosed an ISO-FR layout (because I'm üá´üá∑).\n  </div>\n  <div class=\"text\">\n    The last parameter to take into account is how you'll fix your keys on your keyboards.\n    When you'll press a key, the switch will make contact and give electricity on a specific place of your PCB,\n    then your computer will recognize the key you pressed.\n    So you need to fix the switch (part of the keys, we'll see later) on your PCB, you can solder it or just plug it. <br> <br>\n    I recommend taking the hotswap version, so you can easily take in and off switches from the PCB.\n    If you're an old school, maybe you'll prefer to solder every single switch to your PCB.\n  </div>\n  <img loading=\"lazy\" src=\"@/assets/keyboard/PCB.png\">\n  <div class=\"text\">\n    The PCB I choosed is the CK65 (rgb üåà) from candykey, it's a 65%, ISO-FR and hot swappable PCB. Reference \n    <a href=\"https://candykeys.com/product/ck65-iso-pcb-hotswap\" target=\"_blank\"> here</a>.\n  </div>\n  <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n    &#9888; Before going any further, test every single key (go on Testing section) &#9888;\n  </div>\n  <div class=\"h2\">\n    Case\n  </div>\n  <div class=\"text\">\n    Now you've found what type of keyboard you want to build, you can choose the house of your PCB. <br> <br>\n    What you'll need to buy is the case, you can choose between different materials (plastic, wood, aluminium & resin).\n    There are plenty of cases for the 65% keyboards, it depends on your preferences, examples \n    <a href=\"https://kbdfans.com/collections/case\" target=\"_blank\"> here</a>.\n  </div>\n  <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n    &#9888; Be aware of the screw holes on the PCB matching the case &#9888;\n  </div>\n  <div class=\"text\">\n    My case, aluminium (raiseable)\n    <a href=\"https://kprepublic.com/collections/case/products/anodized-aluminium-flat-case-with-metal-feet-for-\ncustom-mechanical-keyboard-black-siver-grey-red-blue-colorway-for-xd68-65\" target=\"_blank\"> here</a>.\n  </div>\n  <img src=\"@/assets/keyboard/case_recto.png\">\n  <img src=\"@/assets/keyboard/case_verso.png\">\n  <div class=\"h2\">\n    Plate\n  </div>\n  <div class=\"text\">\n    You can't just put the keys on the pcb without anything, you need a layer between switches and PCB.\n    Switches will be more stable and you won't see the PCB behind your keys when the keyboard will be assembled,\n    that's why you need a plate (at least in this build). <br> <br>\n    I highly recommend to put an extra foam between the plate and the PCB. It will reduce the sound of the keys and improve\n    the stability of your keyboard by filling the void between the plate and the pcb. Example bellow.\n  </div>\n  <img src=\"@/assets/keyboard/mounting.png\">\n  <div class=\"text\">\n    Bellow my plate with the ref \n    <a href=\"https://kbdfans.com/collections/65-layout-plate/products/65-cnc-aluminum-plate\" target=\"_blank\"> here</a>.\n  </div>\n  <img src=\"@/assets/keyboard/plate.jpg\">\n  <div class=\"text\">\n    And the additionnal foam with the ref \n    <a href=\"https://fr.aliexpress.com/item/1005003001766783.html?spm=a2g0o.order_list.0.0.10235e5bwAB5Es\n&gatewayAdapt=glo2fra\" target=\"_blank\"> here</a>.\n  </div>\n  <img src=\"@/assets/keyboard/PCB_foam.jpg\">\n  <div class=\"h2\">\n    Switches\n  </div>\n  <div class=\"text\">\n    Next step is to choose what type of switch you want, only depends on your tastes.\n    There are two types of switch, linear and tactile (and clicky). A link of the difference between switches \n    <a href=\"https://www.mechanical-keyboard.org/switch-types/\" target=\"_blank\"> here</a>.  <br> <br>\n    I recommend checking a sound test of the different switches, personally I prefer linear ones, most used linear switch\n    are the red switch (mx cherry red), I wanted to get the silent version, so I took the pink switches. Link\n    <a href=\"https://fr.aliexpress.com/item/32950361232.html?spm=a2g0o.order_list.0.0.10235e5b67dMJJ\n&gatewayAdapt=glo2fra\" target=\"_blank\"> here</a>.\n  </div>\n  <img src=\"@/assets/keyboard/switch.png\">\n  <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n    &#9888; Most important part if you want to get the best sound from your keyboard ! &#9888;\n  </div>\n  <div class=\"text\">\n    If there is one part you really need to follow, this one can't be skipped. Lube your fcking switch, please üôÉ <br> <br>\n    The difference between lube switch and non-lube one is huge, the sound will change a lot, the sensation of scraping \n    will be gone, it takes a lot of time but that's really worth it. A link to materials \n    <a href=\"https://fr.aliexpress.com/item/1005003263621064.html?spm=a2g0o.order_list.0.0.10235e5b77kcmT\n&gatewayAdapt=glo2fra\" target=\"_blank\"> here </a> and lube \n    <a href=\"https://www.etsy.com/fr/listing/974317624/5-grammes-krytox-gpl-205-g0-pour?click_key=03f683c\n3a3c02832bf19aec5833849e0267167bf%3A974317624&click_sum=f9bb387c&ref=shop_home_feat_1&sts=1\" target=\"_blank\"> here</a>. <br> <br>\n    Lubing a switch isn't too complicated, but don't put to much on it, link to a youtube tutorial \n    <a href=\"https://www.youtube.com/watch?v=3CvcycYHsOw\" target=\"_blank\"> here</a>.\n  </div>\n  <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n    &#9888; Test all switch as well &#9888;\n  </div>\n  <div class=\"h2\">\n    Stabilizers\n  </div>\n  <div class=\"text\">\n    There are three keys on this layout which need a little bit of help for their stability. Those are the biggest keys of the keyboard,\n    Enter, Space and Back key. If you don't put anything under those keys, they won't be stable and this gonna be annoying for you.\n    You need to buy stabilizers but don't make the same mistake as me, they is two types of stabilizers, screw and no-screw. <br> <br>\n    The PCB I took only have little holes to accept those stabilizers, you need to take stabilizers with screw or this will be not possible for \n    you to put other ones unless you glue them (not the best option üòÖ). Best stabilizers are \n    <a href=\"https://candykeys.com/product/durock-screw-in-stabilisers-V2\" target=\"_blank\"> here</a>, just take it. <br> <br>\n  </div>\n  <div class=\"text\" style=\"color: rgb(252, 58, 58)\">\n    &#9888; You need to lube them as well ! &#9888;\n  </div>\n  <div class=\"text\">\n    If you don't lube your stabilizers, this will sound horrible, another link to do it \n    <a href=\"https://www.youtube.com/watch?v=-2dlAFt6SuA\" target=\"_blank\"> here</a>. <br> <br>\n    Now you can clip stabilizers on the three keys, put screws in the holes by reversing your PCB and your done !\n  </div>\n    <img src=\"@/assets/keyboard/stabilizers.png\">\n  <div class=\"h2\">\n    Keycaps\n  </div>\n  <div class=\"text\">\n    Now you've assembled everything, you can choose the keycaps of your keyboard, things that you put on the switches.\n  </div>\n  <img src=\"@/assets/keyboard/assembled.png\">\n  <div class=\"text\">\n    Before choosing how your keyboard will render with nice keycaps, you need to know that if you took the ISO layout,\n    you won't get a lot of possibilities. The only keycaps you'll find on aliexpress will be ANSI sets with additionnal\n    keycaps to make it ISO compatible. A link of all ISO FR keycaps (with other ISO display), and mine as well\n    <a href=\"https://azertykeycap.github.io/\" target=\"_blank\"> here</a>. <br> <br>\n    If you want to create your own set of keycaps you can use wasdkeyboard website, link \n    <a href=\"https://www.wasdkeyboards.com/products/mechanical-keyboards/custom-printed-keyboards.html\" target=\"_blank\"> here</a>. <br> <br>\n    Your last option is to subscribe to group buy, here you can find people asking to a constructor a specific layout of keycaps,\n    if there are enough people interest by one layout, the constructor will product it in only one edition.\n  </div>\n  <div class=\"h2\">\n    Cable\n  </div>\n  <div class=\"text\">\n    Cable USB to type C isn't in the package of the PCB, you can buy a simple one or the same as me \n    <a href=\"https://fr.aliexpress.com/item/1005003636090168.html?spm=a2g0o.order_list.0.0.18755e5bxtLpXW&gatewayAdapt=glo2fra\" target=\"_blank\"> here</a>.\n  </div>\n  <div class=\"h2\">\n    Tape\n  </div>\n  <div class=\"text\">\n    Another way to reduce noisy sound of the keyboard is to put tape behind the PCB, you can also put a thin layer of between\n    the PCB and the case, don't forget to make holes if you wan't to screw your PCB to your case at the end üòâ\n  </div>\n  <img src=\"@/assets/keyboard/tape.png\">\n  <div class=\"h2\">\n    Testing and Flashing\n  </div>\n  <div class=\"text\">\n    One of the stressful part of building a keyboard is testing, I've encountered some problems during this build... <br> <br>\n    You first need to test by making contact the two pins of your PCB with a contact clamp (don't forget to plug it üòÇ), for testing, I used a \n    website that also provide an open source tools we'll use later. Link \n    <a href=\"https://config.qmk.fm/\" target=\"_blank\"> here</a>. <br> <br>\n    If one of your key isn't working, check the back of the PCB if there is any problem of soldering, personally on key was unsoldered.\n    I used a soldering iron to fix my problem. Then when the PCB have been tested, you can test it while plugging switches one by one.\n    Testing before addind the switch is the best way to save time, if you test everything at the end, it will be annoying to demount all components\n    if the problem come from the PCB and not a switch. <br> <br>\n    Next you will be able to flash your PCB and assign the keys the way you want. First download the tool \n    <a href=\"https://github.com/qmk/qmk_toolbox/releases\" target=\"_blank\"> here</a>. <br> <br>\n    Then go to qmk website, choose your PCB (for me it was CK65), change the disposition as you want, compile, download the firmware.\n    After launch the tool you've download, plug your PCB while pressing the esc key to enter in flash mode (not the only way to enter this mode).\n    You should see a yellow text telling you that you entered flash mode. <br> <br>\n    Now you need to select the MCU of your PCB, you can find it on the electronic chip (mine is atmega32u4). Click \"flash\" and your done ‚ú® <br> <br>\n    A complete tutorial of flashing\n    <a href=\"https://www.youtube.com/watch?v=fuBJbdCFF0Q\" target=\"_blank\"> here</a>.\n  </div>\n</template>\n\n<style scoped>\n.h3 {\n  margin-bottom: 3em;\n}\n\nimg {\n  margin-bottom: 3em;\n  width: 500px;\n  height: auto;\n  box-shadow: 0px 0px 30px 3px rgba(212, 215, 135, 0.2);\n}\n\n.resume {\n  font-size: 1.6em;\n  margin-top: 2em;\n  margin-bottom: 2.5em;\n  border-style: solid;\n  box-shadow: 0px 0px 30px 10px rgba(202, 202, 212, 0.2);\n  margin: 2em auto 2.5em;\n  width: 35vw;\n  padding: 1em;\n}\n\n.text{\n  font-size: 1.1em;\n  margin-bottom: 3em;\n  width: 50vw;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style>\n\n<style scoped>\n@media screen and (max-device-width: 480px) {\n  .resume {\n    width: 75vw;\n    padding: 0.5em;\n  }\n  img, .text, .h3 {\n    width: 95vw;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n</style>\n","import { render } from \"./Keyboard.vue?vue&type=template&id=012c67a5&scoped=true\"\nconst script = {}\n\nimport \"./Keyboard.vue?vue&type=style&index=0&id=012c67a5&scoped=true&lang=css\"\nimport \"./Keyboard.vue?vue&type=style&index=1&id=012c67a5&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/pukito/pi4/front/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-012c67a5\"]])\n\nexport default __exports__","import { createRouter, createWebHistory } from \"vue-router\"\nimport Home from \"@/views/Home.vue\"\nimport Topics from \"@/views/Topics.vue\"\nimport Monitoring from \"@/views/Monitoring.vue\"\nimport Chat from \"@/views/Chat.vue\"\nimport NotFound from \"@/views/NotFound.vue\"\nimport Keyboard from \"@/views/Keyboard.vue\"\nimport Game from \"@/views/Game.vue\"\n\nconst routes = [\n    {\n        name: \"Home\",\n        path: \"/\",\n        component: Home,\n        meta: {\n            title: \"pukito\"\n        }\n    },\n    {\n        name: \"Topics\",\n        path: \"/topics\",\n        component: Topics,\n        meta: {\n            title: \"topics\"\n        }\n    },\n    {\n        name: \"Keyboard\",\n        path: \"/keyboard\",\n        component: Keyboard,\n        meta: {\n            title: \"keyboard\"\n        }\n    },\n    // {\n    //     name: \"Monitoring\",\n    //     path: \"/monitoring\",\n    //     component: Monitoring,\n    //     meta: {\n    //         title: \"monitoring\"\n    //     }\n    // },\n    // {\n    //     name: \"Chat\",\n    //     path: \"/chat\",\n    //     component: Chat,\n    //     meta: {\n    //         title: \"chat\"\n    //     }\n    // },\n    // {\n    //     name: \"Game\",\n    //     path: \"/game\",\n    //     component: Game,\n    //     meta: {\n    //         title: \"game\"\n    //     }\n    // },\n    {\n        name: \"NotFound\",\n        path: \"/:pathMatch(.*)\",\n        component: NotFound,\n        meta: {\n            title: \"404\"\n        }\n    }\n];\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\n\nrouter.afterEach((to, from) => {\n    document.title = to.meta.title;\n});\n\nexport default router;","import { createApp } from \"vue\"\nimport App from \"./App.vue\"\nimport router from \"./router\"\n\n/* import the fontawesome core */\nimport { library } from '@fortawesome/fontawesome-svg-core'\n\n/* import font awesome icon component */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\n\n/* import specific icons */\nimport { faMagnifyingGlass, faBars } from '@fortawesome/free-solid-svg-icons'\n\n/* add icons to the library */\nlibrary.add(faMagnifyingGlass)\nlibrary.add(faBars)\n\ncreateApp(App)\n.use(router)\n.component('font-awesome-icon', FontAwesomeIcon)\n.mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/vuejs-front/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkp_front\"] = self[\"webpackChunkp_front\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1954); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["__exports__","ref","userName","hide","trigger_navbar","value","window","innerWidth","getComputedStyle","document","body","overflow","documentElement","style","onMounted","localStorage","getItem","Buffer","require","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","from","toString","map","c","charCodeAt","slice","join","JSON","parse","jwtPayload","exp","Date","now","removeItem","class","_createElementBlock","render","getElementById","classList","contains","remove","add","sections","querySelectorAll","navLi","onscroll","current","forEach","section","sectionTop","offsetTop","scrollY","getAttribute","li","_hoisted_1","routes","name","path","component","Home","meta","title","Topics","Keyboard","NotFound","router","createRouter","history","createWebHistory","afterEach","to","library","faMagnifyingGlass","faBars","createApp","App","use","FontAwesomeIcon","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}